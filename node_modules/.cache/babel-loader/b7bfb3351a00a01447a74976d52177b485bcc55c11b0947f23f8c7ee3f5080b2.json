{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"WebSocket Connection Example\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($data.connectionStatus), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.receivedMessages, message => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: message\n    }, _toDisplayString(message), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","connectionStatus","_Fragment","_renderList","receivedMessages","message","key"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>WebSocket Connection Example</h1>\n    <p>Status: {{ connectionStatus }}</p>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { io } from 'socket.io-client';\n\nexport default {\n  data() {\n    return {\n      connectionStatus: 'Not connected',\n      receivedMessages: [],\n      socket: null,\n    };\n  },\n  created() {\n    // Change the URL to your WebSocket server's URL\n    this.socket = io('wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production');\n\n    this.socket.on('connect', () => {\n      this.connectionStatus = 'Connected';\n    });\n\n    this.socket.on('message', (message) => {\n      this.receivedMessages.push(message);\n    });\n\n    this.socket.on('disconnect', () => {\n      this.connectionStatus = 'Disconnected';\n    });\n  },\n  beforeUnmount() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAAqC,YAAjC,8BAA4B;;;uBADlCC,mBAAA,CAMM,cALJC,UAAqC,EACrCF,mBAAA,CAAqC,WAAlC,UAAQ,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,gBAAgB,kBAC9BL,mBAAA,CAEK,c,kBADHC,mBAAA,CAAyEK,SAAA,QAAAC,WAAA,CAAnDH,KAAA,CAAAI,gBAAgB,EAA3BC,OAAO;yBAAlBR,mBAAA,CAAyE;MAAhCS,GAAG,EAAED;IAAO,GAAAN,gBAAA,CAAKM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}